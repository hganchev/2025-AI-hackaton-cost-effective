version: '3.8'

services:
  # Backend services
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  
  backend:
    build: ./backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - redis
    env_file:
      - ./backend/.env
    networks:
      - app-network
  
  worker:
    build: ./backend
    command: python manage.py rundramatiq
    volumes:
      - ./backend:/app
    depends_on:
      - redis
    env_file:
      - ./backend/.env
    networks:
      - app-network

  # Artificial service (ML application)
  artificial:
     build: ./artificial
     command: >
      bash -c "python manage.py wait_for_db &&
               python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"
     volumes:
      - ./artificial:/app
      # Create persistent volumes for media and model cache
      - ml_models_data:/app/ml_models
      - media_data:/app/media
     ports:
      - "8001:8001"
     environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRES_DB=book_translator
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
     depends_on:
      - redis
      - db
     restart: unless-stopped
     networks:
      - app-network

  celery:
    build: ./artificial
    command: ["celery", "-A", "book_translator", "worker", "-l", "info", "-E"]
    volumes:
      - ./artificial:/app
      - ml_models_data:/app/ml_models
      - ./media:/app/media
    environment:
      - DEBUG=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRES_DB=book_translator
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    depends_on:
      - redis
      - db
    deploy:
      resources:
        limits:
          cpus: '5.0'  # Limit of CPU
        reservations:
          cpus: '1.0'  # Guarantee at least CPU
    restart: unless-stopped
    networks:
      - app-network

  flower:
    image: mher/flower:latest
    build: 
      context: ./artificial
      dockerfile: Dockerfile
    command: >
      celery -A book_translator flower
      --broker=redis://redis:6379/0
      --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - app-network

  db:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=book_translator
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    command: postgres -c 'max_connections=100' -c 'shared_buffers=256MB'
    networks:
      - app-network

volumes:
  redis_data:
  media_data:
    # Persists uploaded books
  ml_models_data:
    # Persists ML models and data
  postgres_data:
    # This volume persists PostgreSQL data between container restarts

networks:
  app-network:
    driver: bridge